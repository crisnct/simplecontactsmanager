spring:
  application:
    name: contacts-service
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3307}/${MYSQL_DATABASE:contacts_db}?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
    username: ${MYSQL_USER:contacts_user}
    password: ${MYSQL_PASSWORD:contacts_pass}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: none
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: contacts-service
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: com.example.contacts.kafka
        spring.json.value.default.type: com.example.contacts.kafka.SignupEvent
        spring.json.use.type.headers: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB

server:
  port: ${SERVER_PORT:9001}

app:
  weather:
    base-url: ${WEATHER_SERVICE_URL:http://localhost:9000}
    cache-ttl-seconds: ${WEATHER_CACHE_TTL_SECONDS:180}
    error-cache-ttl-seconds: ${WEATHER_ERROR_CACHE_TTL_SECONDS:30}
  kafka:
    topics:
      signup: ${KAFKA_SIGNUP_TOPIC:user-signups}
